/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StudioRouteImport } from './routes/_studio'
import { Route as NeoRouteImport } from './routes/_neo'
import { Route as NeoIndexRouteImport } from './routes/_neo/index'
import { Route as StudioStudioRouteImport } from './routes/_studio/studio'

const StudioRoute = StudioRouteImport.update({
  id: '/_studio',
  getParentRoute: () => rootRouteImport,
} as any)
const NeoRoute = NeoRouteImport.update({
  id: '/_neo',
  getParentRoute: () => rootRouteImport,
} as any)
const NeoIndexRoute = NeoIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NeoRoute,
} as any)
const StudioStudioRoute = StudioStudioRouteImport.update({
  id: '/studio',
  path: '/studio',
  getParentRoute: () => StudioRoute,
} as any)

export interface FileRoutesByFullPath {
  '/studio': typeof StudioStudioRoute
  '/': typeof NeoIndexRoute
}
export interface FileRoutesByTo {
  '/studio': typeof StudioStudioRoute
  '/': typeof NeoIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_neo': typeof NeoRouteWithChildren
  '/_studio': typeof StudioRouteWithChildren
  '/_studio/studio': typeof StudioStudioRoute
  '/_neo/': typeof NeoIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/studio' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/studio' | '/'
  id: '__root__' | '/_neo' | '/_studio' | '/_studio/studio' | '/_neo/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  NeoRoute: typeof NeoRouteWithChildren
  StudioRoute: typeof StudioRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_studio': {
      id: '/_studio'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof StudioRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_neo': {
      id: '/_neo'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NeoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_neo/': {
      id: '/_neo/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof NeoIndexRouteImport
      parentRoute: typeof NeoRoute
    }
    '/_studio/studio': {
      id: '/_studio/studio'
      path: '/studio'
      fullPath: '/studio'
      preLoaderRoute: typeof StudioStudioRouteImport
      parentRoute: typeof StudioRoute
    }
  }
}

interface NeoRouteChildren {
  NeoIndexRoute: typeof NeoIndexRoute
}

const NeoRouteChildren: NeoRouteChildren = {
  NeoIndexRoute: NeoIndexRoute,
}

const NeoRouteWithChildren = NeoRoute._addFileChildren(NeoRouteChildren)

interface StudioRouteChildren {
  StudioStudioRoute: typeof StudioStudioRoute
}

const StudioRouteChildren: StudioRouteChildren = {
  StudioStudioRoute: StudioStudioRoute,
}

const StudioRouteWithChildren =
  StudioRoute._addFileChildren(StudioRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  NeoRoute: NeoRouteWithChildren,
  StudioRoute: StudioRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
